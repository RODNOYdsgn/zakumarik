let cart = {};
let products = [];
let categories = [];
let userPurchaseCount = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    await loadCatalogData();
    updateCartDisplay();
    checkLoyaltyStatus();
});

async function loadCatalogData() {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    categories = [
        { id: 1, name: "üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", description: "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –≥–∞–¥–∂–µ—Ç—ã" },
        { id: 2, name: "üëï –û–¥–µ–∂–¥–∞", description: "–ú–æ–¥–Ω–∞—è –æ–¥–µ–∂–¥–∞" },
        { id: 3, name: "üè† –î–æ–º –∏ —Å–∞–¥", description: "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞" }
    ];
    
    products = [
        { id: 1, name: "iPhone 15", description: "–ù–æ–≤–µ–π—à–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple", price: 89990, stock_quantity: 5, category_id: 1, image_url: "https://via.placeholder.com/300x200" },
        { id: 2, name: "Samsung Galaxy S24", description: "–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π Android", price: 79990, stock_quantity: 3, category_id: 1, image_url: "https://via.placeholder.com/300x200" },
        { id: 3, name: "–§—É—Ç–±–æ–ª–∫–∞ Nike", description: "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞", price: 2990, stock_quantity: 10, category_id: 2, image_url: "https://via.placeholder.com/300x200" },
        { id: 4, name: "–î–∂–∏–Ω—Å—ã Levi's", description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã", price: 5990, stock_quantity: 7, category_id: 2, image_url: "https://via.placeholder.com/300x200" },
        { id: 5, name: "–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –ª–∞–º–ø–∞", description: "LED –ª–∞–º–ø–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã", price: 1590, stock_quantity: 15, category_id: 3, image_url: "https://via.placeholder.com/300x200" }
    ];
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userPurchaseCount = Math.floor(Math.random() * 10);
    
    renderCategories();
    renderProducts();
}

function renderCategories() {
    const categoriesContainer = document.getElementById('categories');
    categoriesContainer.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
    const allBtn = document.createElement('div');
    allBtn.className = 'category-item active';
    allBtn.innerHTML = 'üõçÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã';
    allBtn.onclick = () => selectCategory(null);
    categoriesContainer.appendChild(allBtn);
    
    categories.forEach(category => {
        const categoryElement = document.createElement('div');
        categoryElement.className = 'category-item';
        categoryElement.innerHTML = category.name;
        categoryElement.onclick = () => selectCategory(category.id);
        categoriesContainer.appendChild(categoryElement);
    });
}

function selectCategory(categoryId) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    document.querySelectorAll('.category-item').forEach(item => {
        item.classList.remove('active');
    });
    event.target.classList.add('active');
    
    renderProducts(categoryId);
}

function renderProducts(categoryId = null) {
    const productsContainer = document.getElementById('products');
    productsContainer.innerHTML = '';
    
    const filteredProducts = categoryId 
        ? products.filter(p => p.category_id === categoryId)
        : products;
    
    filteredProducts.forEach(product => {
        const productElement = document.createElement('div');
        productElement.className = 'product-item';
        productElement.innerHTML = `
            <img src="${product.image_url}" alt="${product.name}" class="product-image" onerror="this.src='https://via.placeholder.com/300x200?text=–ù–µ—Ç+—Ñ–æ—Ç–æ'">
            <div class="product-info">
                <div class="product-name">${product.name}</div>
                <div class="product-description">${product.description}</div>
                <div class="product-price">${product.price.toLocaleString()} ‚ÇΩ</div>
                <div class="product-stock">–û—Å—Ç–∞–ª–æ—Å—å: ${product.stock_quantity} —à—Ç.</div>
                <button class="add-to-cart-btn" onclick="addToCart(${product.id})" ${product.stock_quantity === 0 ? 'disabled' : ''}>
                    ${product.stock_quantity === 0 ? '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'}
                </button>
            </div>
        `;
        productsContainer.appendChild(productElement);
    });
}

function addToCart(productId) {
    const product = products.find(p => p.id === productId);
    if (!product || product.stock_quantity === 0) return;
    
    if (cart[productId]) {
        if (cart[productId].quantity < product.stock_quantity) {
            cart[productId].quantity++;
        } else {
            tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ!');
            return;
        }
    } else {
        cart[productId] = {
            ...product,
            quantity: 1
        };
    }
    
    updateCartDisplay();
    tg.HapticFeedback.impactOccurred('light');
}

function removeFromCart(productId) {
    if (cart[productId]) {
        cart[productId].quantity--;
        if (cart[productId].quantity <= 0) {
            delete cart[productId];
        }
    }
    updateCartDisplay();
    renderCartItems();
}

function updateCartDisplay() {
    const cartCount = Object.values(cart).reduce((sum, item) => sum + item.quantity, 0);
    document.getElementById('cart-count').textContent = cartCount;
}

function toggleCart() {
    const cartModal = document.getElementById('cart-modal');
    if (cartModal.style.display === 'block') {
        cartModal.style.display = 'none';
    } else {
        cartModal.style.display = 'block';
        renderCartItems();
    }
}

function renderCartItems() {
    const cartItemsContainer = document.getElementById('cart-items');
    cartItemsContainer.innerHTML = '';
    
    const cartArray = Object.values(cart);
    
    if (cartArray.length === 0) {
        cartItemsContainer.innerHTML = '<div class="empty-cart">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>';
        document.getElementById('total-amount').textContent = '0';
        document.getElementById('discount-info').style.display = 'none';
        return;
    }
    
    let total = 0;
    
    cartArray.forEach(item => {
        const itemTotal = item.price * item.quantity;
        total += itemTotal;
        
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <div class="cart-item-info">
                <div class="cart-item-name">${item.name}</div>
                <div class="cart-item-price">${item.price.toLocaleString()} ‚ÇΩ √ó ${item.quantity}</div>
            </div>
            <div class="cart-item-controls">
                <button class="quantity-btn" onclick="removeFromCart(${item.id})">‚àí</button>
                <span>${item.quantity}</span>
                <button class="quantity-btn" onclick="addToCart(${item.id})">+</button>
            </div>
        `;
        cartItemsContainer.appendChild(cartItem);
    });
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    const isLoyaltyPurchase = (userPurchaseCount + 1) % 7 === 0;
    let discount = 0;
    
    if (isLoyaltyPurchase && cartArray.length > 0) {
        const cheapestItem = cartArray.reduce((min, item) => 
            item.price < min.price ? item : min
        );
        discount = cheapestItem.price * 0.35;
        
        document.getElementById('discount-info').style.display = 'block';
        document.getElementById('discount-amount').textContent = discount.toLocaleString();
    } else {
        document.getElementById('discount-info').style.display = 'none';
    }
    
    const finalTotal = total - discount;
    document.getElementById('total-amount').textContent = finalTotal.toLocaleString();
}

function checkLoyaltyStatus() {
    const isNextLoyalty = (userPurchaseCount + 1) % 7 === 0;
    const loyaltyBanner = document.getElementById('loyalty-banner');
    
    if (isNextLoyalty) {
        loyaltyBanner.style.display = 'block';
    }
}

function placeOrder() {
    const fullName = document.getElementById('full-name').value.trim();
    const phone = document.getElementById('phone').value.trim();
    
    if (!fullName || !phone) {
        tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        return;
    }
    
    if (Object.keys(cart).length === 0) {
        tg.showAlert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
        return;
    }
    
    const orderData = {
        action: 'place_order',
        cart: Object.values(cart),
        phone: phone,
        full_name: fullName
    };
    
    tg.sendData(JSON.stringify(orderData));
    tg.close();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
tg.BackButton.show();
tg.BackButton.onClick(() => {
    tg.close();
});
